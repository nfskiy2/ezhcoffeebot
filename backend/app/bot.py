# backend/app/bot.py
import logging
import os
import asyncio
import uuid
from typing import Optional

from telegram import (
    Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, Bot
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, PreCheckoutQueryHandler, ContextTypes
)
from telegram.error import TelegramError

from .database import SessionLocal
from .models import Order

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
WEBHOOK_PATH = '/bot'
APP_URL = os.getenv('APP_URL')
STAFF_GROUP_ID = os.getenv('STAFF_GROUP_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_order_for_message(order: Order, for_staff: bool = False) -> str:
    """
    (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ snake_case –∫–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º.
    """
    order_id_short = str(order.id).split('-')[0]
    
    item_lines = []
    for item in order.cart_items:
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—â–µ–º –∫–ª—é—á 'cafe_item' –≤–º–µ—Å—Ç–æ 'cafeItem' ---
        item_name = item.get('cafe_item', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
        variant_name = item.get('variant', {}).get('name', '')
        quantity = item.get('quantity', 0)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
        line = f"  - {item_name} ({variant_name}) x {quantity}"
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—â–µ–º –∫–ª—é—á 'selected_addons' –≤–º–µ—Å—Ç–æ 'selectedAddons' ---
        addons = item.get('selected_addons', [])
        if addons:
            for addon in addons:
                addon_name = addon.get('name', '–¥–æ–±–∞–≤–∫–∞')
                line += f"\n    + {addon_name}"
        
        item_lines.append(line)
    
    items_text = "\n".join(item_lines)
    total_amount_rub = order.total_amount / 100.0

    if for_staff:
        user_info = order.user_info or {}
        username = user_info.get('username', 'N/A')
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        
        message_text = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ `#{order_id_short}`\n\n"
            f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {first_name} {last_name} (@{username})\n"
            f"üåø **–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**\n{items_text}\n\n"
            f"üí∞ **–ò—Ç–æ–≥–æ:** {total_amount_rub:.2f} RUB"
        )
    else:
        message_text = (
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ `#{order_id_short}` –ø—Ä–∏–Ω—è—Ç! üéâ\n\n"
            f"üåø **–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**\n{items_text}\n\n"
            f"üí∞ **–ò—Ç–æ–≥–æ:** {total_amount_rub:.2f} RUB\n\n"
            f"–ú—ã —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
        )
        
    return message_text


async def send_new_order_notifications(
    order: Order, 
    bot_instance: Bot, 
    user_id_to_notify: Optional[int],
    staff_group_to_notify: Optional[str]
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏/–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—É."""
    if not order:
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id_to_notify:
        try:
            user_text = format_order_for_message(order, for_staff=False)
            await bot_instance.send_message(chat_id=user_id_to_notify, text=user_text, parse_mode='Markdown')
            logger.info(f"Successfully sent order confirmation to user {user_id_to_notify}")
        except TelegramError as e:
            logger.error(f"Failed to send confirmation to user {user_id_to_notify}: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    if staff_group_to_notify:
        try:
            staff_text = format_order_for_message(order, for_staff=True)
            await bot_instance.send_message(chat_id=staff_group_to_notify, text=staff_text, parse_mode='Markdown')
            logger.info(f"Successfully sent order notification to staff group {staff_group_to_notify}")
        except TelegramError as e:
            logger.error(f"Failed to send order notification to staff group {staff_group_to_notify}: {e}")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ---

async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not update.effective_chat: return
    text = '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EZH Cafe!* üåø\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é.'
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", web_app=WebAppInfo(url=APP_URL))]])
    await update.effective_chat.send_message(text, parse_mode='Markdown', reply_markup=markup)

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å PreCheckout, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–ø–ª–∞—Ç–µ."""
    query = update.pre_checkout_query
    if not query: return
    await query.answer(ok=True)
    logger.info(f"Answered pre-checkout query {query.id} successfully.")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É.
    """
    if not update.message or not update.message.successful_payment: return
    
    payment_info = update.message.successful_payment
    order_id_str = payment_info.invoice_payload
    
    logger.info(f"Successful payment received for order_id: {order_id_str}")

    db = SessionLocal()
    try:
        order = db.query(Order).filter(Order.id == uuid.UUID(order_id_str)).first()
        if order:
            order.status = 'paid'
            order.telegram_payment_charge_id = payment_info.telegram_payment_charge_id
            db.commit()
            
            await send_new_order_notifications(
                order=order,
                bot_instance=context.bot,
                user_id_to_notify=update.message.from_user.id,
                staff_group_to_notify=STAFF_GROUP_ID
            )
        else:
            logger.error(f"CRITICAL: Order with ID {order_id_str} not found after successful payment!")
    except Exception as e:
        logger.error(f"Error processing successful payment for order {order_id_str}: {e}")
    finally:
        db.close()


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å FastAPI ---

async def initialize_bot_app() -> Application:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN is not set! Bot will not work.")
        return Application.builder().build()

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", handle_start_command))
    application.add_handler(PreCheckoutQueryHandler(handle_pre_checkout_query))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    logger.info("Telegram Bot handlers registered.")
    return application


async def create_invoice_link(prices: list[LabeledPrice], payload: str, bot_instance: Bot) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    if not PAYMENT_PROVIDER_TOKEN:
        logger.error("PAYMENT_PROVIDER_TOKEN is not set! Cannot create invoice link.")
        return None
    
    try:
        link = await bot_instance.create_invoice_link(
            title='–ó–∞–∫–∞–∑ –≤ EZH Cafe',
            description='–í–∞—à –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å.',
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency='RUB',
            prices=prices,
        )
        return link
    except TelegramError as e:
        logger.error(f"Failed to create invoice link for payload {payload}: {e}")
        return None


async def setup_webhook(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞."""
    if not WEBHOOK_URL or not WEBHOOK_PATH:
        logger.warning("WEBHOOK_URL or WEBHOOK_PATH not set. Webhook not configured.")
        return

    full_webhook_url = f"{WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"
    try:
        await application.bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook set to {full_webhook_url}")
    except TelegramError as e:
        logger.error(f"Failed to set webhook: {e}")